<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自风の小站</title>
  
  <subtitle>Welcome to Maiya&#39;s site</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-05T07:16:30.941Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chilis_NG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>饥饿现象</title>
    <link href="http://example.com/post/20ac2f54.html"/>
    <id>http://example.com/post/20ac2f54.html</id>
    <published>2023-05-03T11:18:31.000Z</published>
    <updated>2023-05-05T07:16:30.941Z</updated>
    
    <content type="html"><![CDATA[<p>PEFC的耐久性很大程度上取决于运行条件。其中最主要的是<strong>电位、温度、相对湿度</strong></p><p>PEFC通常电位范围约0-1.5V，更高的电位会促进衰退，如碳腐蚀和铂溶解。</p><h2 id="不同工况下的近似电极电势">不同工况下的近似电极电势</h2><p>开路： 当电池上没有负载时，燃料电极和空气电极上分别有氢气和空气，就会发生断路。由于每个电极上的反应物交叉和混合电位，OCV通常远低于热力学电位差（例如~1.23 V）。</p><p>关闭： 电池长时间不使用时会出现关闭状态，除非有意向电极室中添加惰性气体。在关闭状态下，电极通常实现由氧还原和腐蚀或氧化反应设定的混合电位。</p><hr><p>以下四种可能产生比上述情况更高的电位（即**&gt;1.2 V**），从而严重危害CLs（甚至是GDL，如果持续时间较长或重复的话）的稳定性。</p><p><strong>初始启动:</strong></p><p>长时间停机，空气会充满燃料电池系统。而后，必须使用H2替换空气以开始工作。H2需要几百毫秒才能穿过实际尺寸的单个电池的燃料流场以替换空气。</p><p>在该气体转换时间内，进入的H2会导致电池电压升高，而空气仍然占据出口位置的流场。在出口位置，电压升高，驱动离子电流以与正常电流相反的方向通过电池。因此，这种CL衰退机制被称为**“反向电流”机制：the “reverse-current” mechanism。**结果导致燃料出口区域的空气电极局部电位&gt;1.4 VRHE（由电池的燃料填充部分驱动）</p><p><img src="https://s2.loli.net/2023/05/03/deyOsRSvKYFVk1b.png" alt="初始启动.png"></p><p>注：</p><p>1、这里描述的是在启动过程中，燃料（H2）从左到右进入PEFC的简单横截面。然而，只要阳极的一个区域中存在H2，而另一个阳极区域中不存在H2，就会出现同样的情况。</p><p>2、电池的氢/空气极（也就是区域A），对电池其余部分起着一种“恒电位仪”的作用，因为它设定了整个电池固体部分中存在的电位（通常是启动时的OCV）（即“金属”电位Vm，由于双极板和电极具有较高的导电性，因此相对均匀）。</p><p>3、池H2不足区域中的反应物完全不同（“图11.2中的区域B”），这导致电解质相中的电位（由该区域中的电化学活性反应物设定）与区域B固相中的电位之间存在很大差异。</p><p>4、巨大的电位差在该H2不足区域驱动电化学反应，这与这些电极上通常发生的情况相反（即，该区域的“阴极”上发生氧化反应，而“阳极”上发生还原反应）。因此，在这个区域，局部离子电流的方向也是相反的 。</p><p>5、在此区域，电池外部没有电流产生；电子从电池的“恒电位仪”区域流向电池平面内的电池驱动部分（即，通过双极板、GDL和膜两侧的其他固体电子导体）。因此，没有外部迹象表明这种反向电流机制正在发生，这使得基本上不可能检测到这种现象，尽管影响可能相当严重。</p><p>6、这种情况下，阴极对应的H2不足区会发生严重的碳腐蚀。</p><p><strong>停止过程：</strong></p><p>吹扫过程中发生反向电流机制。造成空气电极电势&gt;1.4 VRHE。</p><p>停机工况的吹扫过程要快于启动过程。</p><p><strong>局部H2饥饿：</strong></p><p>1、电池任何部分燃料不足，就会产生反向电流。。这是因为没有接收燃料的局部区域将通过膜从电池另一侧的空气中接收氧气（和氮气）。</p><p>2、正常电池电压（在固相中）将在H2不足的位置反向驱动电流。在局部燃料不足期间，测得的电池电压（通常使用电池的“金属”或固相测量）将显示正常，尽管电池缺氢区域存在反向电流机制。</p><p>3、局部H2饥饿现象可能是活性区域内的燃料分布不良造成的。例如，H2流动路径中的液态水会阻碍H2进入阳极催化剂层（即阳极局部“水淹”）。</p><p>4、研究表明，在氢燃料阳极上约2mm的区域内局部燃料不足会导致阴极在相对较短的时间内（例如约100小时）严重衰退。</p><p><strong>全电池H2饥饿：</strong></p><p>这种情况下，任何燃料化学计量&lt;1的电池都会产生负电池电压。</p><p>1、这种情况导致阳极载体（以及最终作为燃料消耗的其他阳极碳组件）承受大于1.2 VRHE的电势。</p><p>2、如果出现这种情况，电堆或系统的设计存在根本性缺陷。</p><p><strong>空气饥饿：</strong></p><p>1、当电流超过ORR的极限电流时（即局部O2化学计量&lt;1），就会出现空气不足的情况。</p><p>2、在这种情况下，氢从空气电极析出，空气电极的电势接近可逆氢电势。在这种情况下，电池的电位略为负值。</p><p>3、此时主要关注的不是电池组件的耐久性，而是<em>安全性</em>，因为空气电极（即正常运行期间的阴极）上可能存在氢气和空气的混合物。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PEFC的耐久性很大程度上取决于运行条件。其中最主要的是&lt;strong&gt;电位、温度、相对湿度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PEFC通常电位范围约0-1.5V，更高的电位会促进衰退，如碳腐蚀和铂溶解。&lt;/p&gt;
&lt;h2 id=&quot;不同工况下的近似电极电势&quot;&gt;不同工况下的近似电</summary>
      
    
    
    
    <category term="大学大不了自学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/PEMFC/"/>
    
    
    <category term="大学" scheme="http://example.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/tags/PEMFC/"/>
    
  </entry>
  
  <entry>
    <title>质子交换膜燃料电池短堆的设计和优化——许坤</title>
    <link href="http://example.com/post/f32487d0.html"/>
    <id>http://example.com/post/f32487d0.html</id>
    <published>2023-04-12T12:16:19.000Z</published>
    <updated>2023-05-07T07:02:54.921Z</updated>
    
    <content type="html"><![CDATA[<h1>绪论</h1><h2 id="工作原理">工作原理</h2><p>质子交换膜燃料电池阳极侧通入氢气，氢气到达阳极催化剂层发生氢氧化反应，失去电子生成质子，质子通过质子交换膜到达阴极侧，电子依次通过阳极侧气体扩散层后到达阳极侧极板，并由外电路转移至阴极侧极板。</p><p>电池内部必须有水传输通道、电子传输通道、质子传输通道和气体传输通道。</p><p>燃料电池极化曲线如下</p><p><img src="https://s2.loli.net/2023/04/12/Si4DyFzoWNXCQMc.png" alt="燃料电池极化曲线.png"></p><p>单个燃料电池单电池理论电压为1.23V。</p><p>开路电压（Open Circuit Voltage）约为1V左右，小于理论可逆电势1.23V。</p><ul><li><p>第一种电压损失：少量氢气会穿过质子交换膜和少量电子传导产生内部电流导致部分电压损失。</p></li><li><p>第二种电压损失被称作动力学极化损失，表现为电压在初始值处迅速降低。这是因为电极表面发生的反应延迟，电极表面产生的部分电压用于驱动电化学反应的电荷转移从而导致电压损失。</p></li><li><p>第三种电压损失被称为欧姆化损失，电压下降速度比动力学极化导致的电压下降速度慢，几乎为线性下降，这主要是电阻损耗电压，电阻包含电子传导材料电阻和质子转导电阻。</p></li><li><p>第四种电压损失被称为传质损失。这种电压极化现象在高密度下更为明显，为非线性下降，这是因为电极表面反应物气体浓度变化引起，随着电流密度的持续增加，电极表面反应物气体浓度快速消耗，导致反应无法持续发生，阴极的氧气分压成为影响性能的主要因素。</p><p>为提供充足电能，需要将多节燃料电池串联组装成燃料电池电堆。</p></li></ul><p>将端板、集流板、双极板、膜电极、密封垫等部件按序组装：</p><p><img src="https://s2.loli.net/2023/05/03/QWrGMohi9Agxp6b.png" alt="组装.png"></p><h2 id="质子交换膜燃料电池电堆结构">质子交换膜燃料电池电堆结构</h2><p>关键部件为<code>双极板、质子交换膜、催化剂、气体扩散层</code>等。</p><p>其中，质子交换膜、催化剂、气体扩散层组成膜电极（Memvrane Electrode Assembly, MEA)。</p><p><img src="https://s2.loli.net/2023/05/03/O2wvrVfAZhYPRdB.png" alt="_TTF2@H4_BR`__14_F_3MIW.png"></p><h3 id="质子交换膜燃料电池电堆的具体操作">质子交换膜燃料电池电堆的具体操作</h3><p>燃料电池运行期间，反应气体应在流场内循环并发生反应，气体的状态从进气口流向尾排口时会发生显著变化。</p><p>膜电极两侧的气体流动方向决定气体反应情况，方向可分为：对流、错流、顺流。</p><p><img src="https://s2.loli.net/2023/05/03/gDlinzr7NfOtxW3.png" alt="8_EW5928P7RW_~Q_~FR__FT.png"></p><p>Ge和Yi等，发现反应气体<strong>对流分布</strong>时不仅可以<code>改善加湿效果、还可使整个膜电极活性区域的电流均匀分布（避免局部热点）。</code></p><p>对流可以使电池中的湿度分布更加均匀。</p><p>Tanii等，使用串联式进气<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>搭建了8节的质子交换膜燃料电池短堆。发现电池一致性较差。这是由于进气口处气体流量较大，导致离进气口近的几节单电池质子交换膜水合不充分。当反应气体流至离尾排口较近的单电池时流速较低，且有一定反应产物，使得这几节单电池质子交换膜水合充分。即性能由<strong>进气口向尾排口逐渐增加</strong>。各单电池之间流动方式通常选用并联分布。</p><hr><p>燃料电池电堆启动或者停止时，可能会造成<code>氢饥饿现象</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>的发生。</p><p>此现象会<em>导致阴极催化剂中的碳腐蚀，使催化剂中金属颗粒暴露降低催化剂寿命</em>。</p><p>变载过程中，氢气供应不足也会导致氢饥饿现象，会导致阳极侧碳腐蚀。</p><p><img src="https://s2.loli.net/2023/05/03/AIm27fMJvXpWbLO.png" alt="尺寸对寿命的影响.png"></p><p>Taniguchi等，发现氧气饥饿时，阴极侧催化剂的电化学活性表面积下降，并发现催化剂中铂颗粒团聚。并未发现阳极侧催化剂发生降解。长时间氧气饥饿测试后，电池性能明显下降。</p><p><em>改变碳载体材料</em>来缓解电堆工作的反极造成的影响是一种方法。例如，使用碳纳米管火碳纳米纤维，可有效改善反极时的碳腐蚀。</p><p>开发出更高的燃料电池<em>电系统控制策略</em>也很重要，合适的策略可有效延长电池或电堆的使用寿命。</p><p>使用<em>气体吹扫</em>，在阴阳两极进行吹扫，在阳极上使用氮气吹扫、阴极尾排的循环吹扫、或者在阴极侧氢气吹扫等方法。</p><p>也可安装<em>辅助负载</em>。Yang等，搭建了5节单电池的电池短堆，连接了虚拟负载。发现虚拟负载可增加燃料电池电堆耐用性，同时单电池的电流密度变化也较均匀。认为安装虚拟负载可对电堆启停起保护作用。</p><h3 id="双极板研究现状">双极板研究现状</h3><p>双极板是电堆的“骨架”，起支撑整体作用，故应<code>有良好机械稳定性</code>。双极板<code>表面刻有流道</code>，输送反应气体并移除反应产生的水。需要具备<code>良好导电性</code>，能够及时传导反应所需电子。反应过程放热，需要及时将过多热量排出，需具有<code>良好导热性</code>。质子交换膜燃料电池反应环境为酸性，双极板应具有一定<code>化学耐久性</code>。</p><p><strong>——双极板材料——</strong></p><p>传统双极板使用材料为：石墨或金属材料。</p><p><strong>碳材料：</strong></p><p>石墨具有良好化学稳定性、导电性、导热性，相比金属材料密度小，价格便宜。但是易碎、机械加工难度大。</p><p>不少学者把目光转向碳复合材料。碳复合材料主要由<code>聚合物</code>和<code>导电碳材料</code>构成。<em>聚合物具有密封性，可防止气体渗漏，与碳材料结合能增强机械稳定性；碳材料起到传输电子和传导热量的作用</em>。</p><p>Mohd等，用研磨碳纤维作为导电材料，环氧树脂压缩制备复合材料。通过向复合材料中加入碳纳米管、炭黑作为辅助材料，来增强材料机械强度和导电率。</p><p>Adloo等，用石墨、石墨烯作为导电材料，聚丙烯作聚合材料。为使石墨烯更好分散，加入马来酸酐接枝的聚丙烯作增容剂。其具备良好导电性和抗弯强度。聚丙烯在主链中没有极性官能团，难以将石墨分散到聚合物中，这会导致较低导电率（可用极性分子接枝到聚丙烯进行改性）。</p><p>Zamersok等，发现增加碳物质可增强导电性，但机械性改善较小。导电碳材料的添加会对双极板性能产生影响。过多会导致复合材料整体机械强度降低，过少则无法满足导电需求。</p><p><code>碳材料的形态、含量、分散程度是决定复合材料双极板性能至关重要的因素。</code></p><p><strong>金属材料：</strong></p><p>金属材料有良好导电性、导热性、机械强度，渗透性小。</p><p>但由于质子交换膜燃料电池或电堆反应处于酸环境，金属双极板表面容易形成氧化层、钝化层、或形成金属离子。氧化层和钝化层会导致导电性能的降低。</p><p>目前，广泛用于双极板的主要材料是不锈钢、钛、铜、铝极其合金。</p><p>铝合金成本低，但是在酸性工作条件下会迅速腐蚀，因此常用表面镀锌或其他金属涂层。</p><p>Tasi等，用镍磷/金(NiP/Au)作为镀层，发现耐腐蚀性得到提升，阻抗减小。</p><p>Mawdsley等，认为铝合金耐腐蚀性差，极化后电阻高。使用不同比例的乙烯-四氟乙烯（ETFE)、石墨、碳化钛等材料制备涂层，并涂覆到铝合金基底上。</p><p>Bolouri等，发现不含铜的铝合金材料双极板具有更低的腐蚀电流和更好的性能。</p><p>Deyab等，加入少量碳纳米管可防止腐蚀并提高表面电导率，并具有更高耐腐蚀性。</p><p>Chen等，发现有石墨烯包覆的铝合金材料双极板阻抗前后大致不变，而未包覆的阻抗则有所上升。SEM测试后认为石墨烯覆盖范围较全，可对铝合金提供较长时间保护。</p><p>**不锈钢在所有金属材料中被认为是非常有前途的材料。**与石墨板相比，不锈钢可提供更高的强度、冲击韧性、出色的可加工性。独特的机械性能使其可制造出厚度仅为0.1mm甚至更薄的双极板。</p><p>单独使用不锈钢材料会使其格外易于被腐蚀。其腐蚀产物（氧化铁），回事双极板和气体扩散层之间的接触电阻明显增加。</p><p>不锈钢中加入Cr、Ni等后，氧化层会有更好的导电性。另一种改善方法是为他们开发合适的涂层<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><p><strong>——气体输送——</strong></p><p>双极板另一个作用是传输反应气体，使其到催化层参加反应。同时将产生的水排出膜电极。因此要设计合适的流场：</p><p><img src="https://s2.loli.net/2023/05/07/oZRiByLxVqQOX1c.png" alt="image.png"></p><p>b是平行流场，其是相对简单的设计形状，将流量均等地分配到各个并联路径中，因此压降最小。但若流道中流动阻力没有保持到相同水平，则会导致反应气体分布不均。</p><p>a是单蛇形流场，单蛇道只有一条流道，这条流道可能包含一个或多个可拓展整体有效面积的流道，这种设置将提高反应物气体以及水的流速和压降。可改善水热管理。</p><p>c是交指</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">即反应气体从第一节单电池流至最后一节电池</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">关于饥饿现象，详见<a href="https://chilis-ng.github.io/post/20ac2f54.html?_sw-precache=23c72c29e0c12626304b5721f69c8d59">饥饿现象 | 自风の小站 </a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">涂层应具有良好耐腐蚀性、高导电性，与不锈钢基板有良好粘附性，与不锈钢热膨胀相近的相容系数。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;绪论&lt;/h1&gt;
&lt;h2 id=&quot;工作原理&quot;&gt;工作原理&lt;/h2&gt;
&lt;p&gt;质子交换膜燃料电池阳极侧通入氢气，氢气到达阳极催化剂层发生氢氧化反应，失去电子生成质子，质子通过质子交换膜到达阴极侧，电子依次通过阳极侧气体扩散层后到达阳极侧极板，并由外电路转移至阴极侧极板。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="大学大不了自学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/PEMFC/"/>
    
    
    <category term="大学" scheme="http://example.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/tags/PEMFC/"/>
    
  </entry>
  
  <entry>
    <title>MySQL_Stu_1</title>
    <link href="http://example.com/post/750e0958.html"/>
    <id>http://example.com/post/750e0958.html</id>
    <published>2023-03-23T10:10:28.000Z</published>
    <updated>2023-03-23T10:57:37.806Z</updated>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>科学研究与论文写作</title>
    <link href="http://example.com/post/2db5a85a.html"/>
    <id>http://example.com/post/2db5a85a.html</id>
    <published>2023-03-22T10:42:10.000Z</published>
    <updated>2023-03-23T10:57:37.804Z</updated>
    
    <content type="html"><![CDATA[<h1>检索式构建</h1><p>拿到一个专业名称后，百度一下，搜索了解它的学术表达方式。参考网站：</p><p><a href="https://dict.cnkint.net/index%E3%80%82">https://dict.cnkint.net/index。</a></p><p>[Web of Science](<a href="https://www.webofscience.com/wos/alldb/basic-search">文献检索 - 所有数据库 (webofscience.com)</a>)(建议合计选择前两个：核心合集和中国科学引文)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;检索式构建&lt;/h1&gt;
&lt;p&gt;拿到一个专业名称后，百度一下，搜索了解它的学术表达方式。参考网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dict.cnkint.net/index%E3%80%82&quot;&gt;https://dict.cnkint.net/index。&lt;/</summary>
      
    
    
    
    <category term="科学研究方法" scheme="http://example.com/categories/%E7%A7%91%E5%AD%A6%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="研究方法与论文" scheme="http://example.com/tags/%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E4%B8%8E%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>flask搭建</title>
    <link href="http://example.com/post/d5fd331f.html"/>
    <id>http://example.com/post/d5fd331f.html</id>
    <published>2023-03-21T06:59:55.000Z</published>
    <updated>2023-03-23T14:37:22.285Z</updated>
    
    <content type="html"><![CDATA[<p>考虑到笔者最为熟悉的是Python，因此打算换用可以直接用python轻松搭建的Flask。</p><p>文档：<a href="https://flask.net.cn/">https://flask.net.cn/</a></p><h1>快速搭建</h1><p>使用最新版本的Python3。</p><h2 id="创建虚拟环境">创建虚拟环境</h2><p>虚拟环境可以为每一个项目安装独立的Python库。Python3内置用于创建虚拟环境的<code>venv</code>模块。</p><p>先新建一个项目文件夹，在文件夹中运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject   # 新建一个名为myproject的文件夹，作为环境文件</span><br><span class="line">cd myproject   # 定位在这个文件夹中</span><br><span class="line"># 可以不写，默认定位根目录</span><br><span class="line">python3 -m venv venv</span><br></pre></td></tr></table></figure><p>接着运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -3 -m venv venv</span><br></pre></td></tr></table></figure><p>环境创建完成后，激活它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>完成</p><h2 id="安装Flask">安装Flask</h2><p>在激活的虚拟环境中可以使用如下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br></pre></td></tr></table></figure><p>更新Flask命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U https://github.com/pallets/flask/archive/master.tar.gz</span><br></pre></td></tr></table></figure><h1>常用函数</h1><blockquote><p>request库</p></blockquote><p><code>request</code>是</p><h1>开始应用</h1><h2 id="一个简单的例子">一个简单的例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask<span class="comment"># 导入了Flask</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__) <span class="comment"># 路由</span></span><br><span class="line"><span class="comment">#程序实例需要知道每个url请求所对应的运行代码是谁。</span></span><br><span class="line"><span class="comment">#所以程序中必须要创建一个url请求地址到python运行函数的一个映射。</span></span><br><span class="line"><span class="comment">#处理url和视图函数之间的关系的程序就是&quot;路由&quot;，在Flask中，路由是通过@app.route装饰器(以@开头)来表示的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span><span class="comment"># 告诉 Flask 触发函数的 URL ，默认是首页的index</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():<span class="comment"># 用于生成相关联的 URL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span>   </span><br><span class="line">app.run ()    <span class="comment"># 程序中可以不写app.run()</span></span><br><span class="line"><span class="comment"># 括号中可选host, port, debug, options</span></span><br></pre></td></tr></table></figure><ul><li><p>host：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</p></li><li><p>port ：默认值为5000</p></li><li><p>debug：默认为false。 如果设置为true，则提供调试信息，可以自动重载代码并显示调试信息</p></li><li><p>options：要转发到底层的Werkzeug服务器。</p><p>如，可以这样填<code>host=&quot;0.0.0.0&quot;, port=8888, debug = True</code></p></li></ul><p>可以保存为<code>hello.py</code>等类似名字。但是不能用<code>flask.py</code>作为应用名称。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考虑到笔者最为熟悉的是Python，因此打算换用可以直接用python轻松搭建的Flask。&lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&quot;https://flask.net.cn/&quot;&gt;https://flask.net.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;快速搭建&lt;/h1&gt;
&lt;p&gt;使</summary>
      
    
    
    
    <category term="Flask的搭建之旅" scheme="http://example.com/categories/Flask%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
    
    
    <category term="Flask" scheme="http://example.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>网站访问</title>
    <link href="http://example.com/post/f7c24785.html"/>
    <id>http://example.com/post/f7c24785.html</id>
    <published>2023-03-20T06:48:13.000Z</published>
    <updated>2023-03-21T12:55:28.861Z</updated>
    
    <content type="html"><![CDATA[<h1>1.2 网站的几种访问方式</h1><h2 id="1-2-1-客户端GET方式发送数据">1.2.1 客户端GET方式发送数据</h2><p>GET发送的数据应附在URL后面，格式为：</p><p><code>“url”?键1=值1&amp;键2=值2&amp;键3=值3......</code></p><p>例如向服务器传递省份与城市的数据：</p><p><code>urllib.request.urlopen(&quot;http://127.0.0.1:5000?province=GD&amp;city=SZ&quot;)</code></p><p>如果参数含有汉字，则需要使用<code>urllib.parse.quote</code>函数进行编码，例如：<a href="http://client.py">client.py</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">province= urllib.parse.qoute(&quot;广东&quot;) </span><br><span class="line"></span><br><span class="line">city= urllib.parse.qoute(&quot;深圳&quot;)</span><br></pre></td></tr></table></figure><p>则，一个完整的客户端可以是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:5000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">province = urllib.parse.quote(<span class="string">&quot;广东&quot;</span>)</span><br><span class="line">city = urllib.parse.quote(<span class="string">&quot;深圳&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;province=&quot;</span>+province+<span class="string">&quot;&amp;city=&quot;</span>+city        <span class="comment"># 即是 键=值</span></span><br><span class="line">html = urllib.request.urlopen(<span class="string">&quot;http://127.0.0.1:5000?&quot;</span>+data)</span><br><span class="line">html = html.read()</span><br><span class="line">html = html.decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="built_in">print</span>(err)</span><br></pre></td></tr></table></figure><h2 id="1-2-2-服务器获取GET发送的数据">1.2.2 服务器获取GET发送的数据</h2><p>服务器用Flask中的<code>request.args</code>来储存GET参数。用GET来获取参数，即是用 <code>flask.request.args.get(参数)</code>来获取参数的值。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">province=flask.request.args.get(<span class="string">&quot;province&quot;</span>) </span><br><span class="line">city=flask.request.args.get(<span class="string">&quot;city&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以这样编写服务器程序：<a href="http://sever.py">sever.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask     <span class="comment"># 引入Flask程序</span></span><br><span class="line">app=flask.Flask(__name__)    <span class="comment"># 初始化、命名程序</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)    </span><span class="comment"># 指明路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">province=flask.request.args.get(<span class="string">&quot;province&quot;</span>)</span><br><span class="line">city = flask.request.args.get(<span class="string">&quot;city&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> province+<span class="string">&quot;,&quot;</span>+city</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(err)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1.2 网站的几种访问方式&lt;/h1&gt;
&lt;h2 id=&quot;1-2-1-客户端GET方式发送数据&quot;&gt;1.2.1 客户端GET方式发送数据&lt;/h2&gt;
&lt;p&gt;GET发送的数据应附在URL后面，格式为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“url”?键1=值1&amp;amp;键2=值2&amp;amp;键</summary>
      
    
    
    
    <category term="Python_Study" scheme="http://example.com/categories/Python-Study/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>静电喷涂操作规范</title>
    <link href="http://example.com/post/f1a6d443.html"/>
    <id>http://example.com/post/f1a6d443.html</id>
    <published>2023-03-16T14:12:04.000Z</published>
    <updated>2023-03-18T11:36:13.141Z</updated>
    
    <content type="html"><![CDATA[<h1>静电喷涂操作规范</h1><h2 id="1、配墨汁">1、配墨汁</h2><p>以商业Pt/C催化剂为例，适用于2.5×2.5膜。</p><table><thead><tr><th>喷涂面积cm2</th><th>铂载量mg/cm2</th><th>铂质量mg</th><th>铂碳40%</th><th>分散剂（异丙醇）ml</th><th>铂碳固含量</th><th>固体总量</th><th>Nafion固含量</th><th>Nafion质量</th><th>5%Nafion溶液质量mg</th></tr></thead><tbody><tr><td>6.25</td><td>0.35</td><td>2.19</td><td><strong>10.9</strong></td><td>2.1875</td><td><code>70%</code></td><td>——</td><td><code>30.00%</code></td><td>4.69</td><td><strong>93.8</strong></td></tr><tr><td>6.25</td><td>0.15</td><td>0.94</td><td><strong>4.69</strong></td><td>0.9375</td><td><code>70%</code></td><td>6.70</td><td><code>30.00%</code></td><td>2.01</td><td><strong>40.2</strong></td></tr></tbody></table><p>配制方法：</p><p>1、用小烧杯（5ml）称取相应质量的<code>铂碳催化剂</code>，滴几滴（50微升即可）去离子水润湿催化剂。</p><p>2、称取相应质量的5%Nafion溶液，再加入相应体积的异丙醇分散剂。</p><p>3、超声60-90min（大功率超声可以缩短超声时间）使浆液分散、稳定。<code>超声结束后要及时使用</code>。</p><p>由于阳极载量小，所用材料少。如果阴、阳极用同一种催化剂，可以一次性配制，根据喷涂时间来控制喷涂量，<code>程序的喷涂速度是0.1mL·min-1</code>。<em>喷涂时根据<strong>液体的实际体积</strong>来分配时间，而不是注射器被拉开的容量</em>。</p><h2 id="2、贴膜">2、贴膜</h2><p>选取对应尺寸的硅胶垫，将质子交换膜固定在硅胶垫上。这里以一般情况说明。</p><h3 id="碳纸贴膜">碳纸贴膜</h3><p>1、准备质子交换膜。取出碳纸（全程小心，避免碳纸破裂），裁出4*4大小的碳纸块（按压时，取保底部是硬质干净平台，按压要分别按压四个边），用镊子夹出，放入培养皿备用（保证喷涂面干净，<strong>灰尘可用洗耳球吹去</strong>），称重，记录数据。</p><p>2、准备硅胶垫。拿取2.5×2.5尺寸的硅胶垫，用沾有无水乙醇的干巾擦拭垫子，去除污渍。注意区分硅胶垫上、下面，质子交换膜贴于“下”面（因此贴膜时为“下”面朝上，“上”面朝向桌面）。</p><p>3，将膜贴在硅胶垫上。操作时应佩戴手套，用镊子将质子交换膜取出，喷涂面朝下，置于中心孔（空应在膜的中心位置）。接下来用裁剪黄金胶带，并将质子交换膜的四个角固定（取保粘牢即可，必须确保质子交换膜平整，不得有鼓起、蜷曲）。</p><h3 id="Nafino211膜">Nafino211膜</h3><h2 id="3、机器调整">3、机器调整</h2><p>期间保持质子交换膜洁净</p><p>1、<strong>操作前应确保机器处于关闭状态</strong>。</p><p>2、连接管道和喷嘴。取出喷嘴，旋入喷管接口处（注意不要用力按压针头），将喷嘴处的导电片用螺母固定（用手即可拧开）。</p><p>3、准备机器。打开真空泵，并通过喷涂机控制面板启动预热，<strong>设置温度为80°C</strong>（必须保持台面洁净，确保喷涂均匀），然后将贴有质子交换膜的硅胶垫平铺在平台上，注意“上”面朝上。</p><p>4，通过操作面板关闭电机（默认关闭，关闭时可移动），手动移动将针头对<strong>准质子交换膜左下角</strong>，然后转动控制平台高度的旋钮，使喷嘴和硅胶垫之间<strong>距离约为1.5cm</strong>。</p><h2 id="4、安置墨汁">4、安置墨汁</h2><p>1，准备针管。将针管注射器取出，针管安装在喷嘴处。用注射器吸取超声好的墨汁，墨汁吸取后还应再吸取少量空气（墨汁和空气比例是2:1）。</p><p>2，安置注射器。手动旋转螺杆，将注射器安置后，<strong>慢旋螺杆</strong>、移动挡板，将墨汁推到喷头，直到喷头有一滴墨汁挤出。<strong>必须注意，在喷头下放置张垫纸，防止挤出的墨汁直接滴在质子交换膜上。</strong></p><h2 id="5、喷涂">5、喷涂</h2><p>1，打开电压开关<code>（红色旋钮，右旋为弹出或拔出为开，按下为关）</code>，调节电压大小至8kV，调节控制面板，选择“从存储卡中选择程序”，选择“2.5-2.5-1.1”进行喷涂。</p><p>2，喷涂过程中观察运行路径与浆液分数情况，如有异常，可暂停打印，（按下控制面板旋钮，选择暂停打印，关闭电压旋钮），<strong>注意及时将垫纸放在喷嘴下方，避免触碰喷嘴，防止触电</strong> 。<strong>关闭电压后严禁立即触碰喷嘴</strong>，此时电荷尚未散开，等待十秒以后再调整。</p><p>3，暂停后选择“运动”，然后选择“关闭步进电机”再进行调整。暂停前应观察电机运动路径，以方便调整喷嘴，重新打印。</p><p>4，喷涂结束后停止程序，关闭高压电源，关闭真空泵，水平将硅胶垫取出，放在洁净的桌面上，等硅胶垫冷却后，用镊子将黄金胶带撕开，取出质子交换膜，放入培养皿。称重，记录数据。（整个过程轻拿轻放，防止质子交换膜的损坏）</p><h2 id="6、密封">6、密封</h2><p>拿出对应的密封袋，用镊子将碳纸夹入袋中，并用封装机密封。用记号笔写下实验日期。</p><h2 id="后续处理">后续处理</h2><p>记录实验数据。</p><p>保护仪器，方便下次实验</p><p>1，确保关闭静电喷涂机，取出管道喷嘴和注射器。取出无水乙醇于烧杯中，将喷嘴，针头置入烧杯中进行超声清洗。</p><p>2，将注射器连接管道，反复推压乙醇，进行清洗</p><p>3，结束后将仪器进行干燥，放回</p><p>4，废液倒入废液桶</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;静电喷涂操作规范&lt;/h1&gt;
&lt;h2 id=&quot;1、配墨汁&quot;&gt;1、配墨汁&lt;/h2&gt;
&lt;p&gt;以商业Pt/C催化剂为例，适用于2.5×2.5膜。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;喷涂面积cm2&lt;/th&gt;
&lt;th&gt;铂载量mg/cm2&lt;/th&gt;
&lt;th&gt;铂质</summary>
      
    
    
    
    <category term="大学大不了自学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/PEMFC/"/>
    
    
    <category term="大学" scheme="http://example.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="喷涂" scheme="http://example.com/tags/%E5%96%B7%E6%B6%82/"/>
    
  </entry>
  
  <entry>
    <title>三、Hexo搭建 美化我的BOLG</title>
    <link href="http://example.com/post/13313.html"/>
    <id>http://example.com/post/13313.html</id>
    <published>2023-03-14T13:25:32.000Z</published>
    <updated>2023-05-07T06:57:40.454Z</updated>
    
    <content type="html"><![CDATA[<h1>魔改要加速了</h1><hr><h2 id="给音乐界面添加Aplayer">给音乐界面添加Aplayer</h2><p>终于搞定了，我发现网上虽然教程不少，但是面向小白的真的聊胜于无了，捣鼓了半天终于自己摸索懂了。以下是我的一些操作流程。</p><h3 id="添加Aplayer">添加Aplayer</h3><p>1，根目录运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new page music</span><br><span class="line"></span><br><span class="line">npm install aplayer</span><br><span class="line"></span><br><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>2，在 博客根目录\source\music\index.md使用以下格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的歌单</span><br><span class="line">date: 2022-10-31 18:45:36</span><br><span class="line">type: &quot;music&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;font color=#0c74d6 size=3 face=&quot;黑体&quot;&gt;**我比较喜欢的一些轻音乐**&lt;/font&gt; &#123;% meting &quot;7714811335&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#3F51B5&quot; &quot;mutex:true&quot; &quot;preload:auto&quot; %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对<code> &#123;% meting "7714811335" "netease" "playlist" "theme:#3F51B5" "mutex:true" "preload:auto" %&#125;</code>其中的一些元素进行说明</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td>song<code>, </code>playlist<code>, </code>album<code>, </code>search<code>, </code>artist</td></tr><tr><td>fixed</td><td>false</td><td>开启固定模式</td></tr><tr><td>mini</td><td>false</td><td>开启迷你模式</td></tr><tr><td>loop</td><td>all</td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td>list</td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td>false</td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td>metingjs</td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td>true</td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td>true</td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td>340px</td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td>auto</td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td>#ad7a86</td><td>播放器风格色彩设置</td></tr></tbody></table><p>说明：找到一个歌单或单曲的链接。这里用网易云举例</p><p><img src="https://s2.loli.net/2023/03/17/iSXRLTDo6Y7z25M.png" alt="音乐ID.png"></p><p>其中type是playlist，id是后面那串数字，复制粘贴就行，server是netease。不同厂家netease不同。例如：netease, tencent, kugou, xiami, baidu</p><h3 id="全局吸底">全局吸底</h3><p>至此，网页中的音乐已经建立好了，但是我还想让它全局吸底在左下角（就像下图）</p><p><img src="https://s2.loli.net/2023/03/17/PnvEoH2I4xZ9mkG.jpg" alt="全局吸底.jpg"></p><p>这里以 Butterfly 主题为例，参考文章：<a href="https://butterfly.js.org/posts/507c070f/">https://butterfly.js.org/posts/507c070f/</a></p><p>由于需要全局都插入 aplayer 和 meting 资源，为了防止插入重复的资源，需要把 asset_inject 设为 false</p><p>在 Hexo 的配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br><span class="line">  asset_inject: false</span><br></pre></td></tr></table></figure><h4 id="开启主题的-AplayerInject">开启主题的 AplayerInject</h4><p>在主题的配置文件中，<code>enable</code> 设为 <code>true</code> 和 <code>per_page</code> 设为 <code>true</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line"># Inject the css and script (aplayer/meting)</span><br><span class="line">aplayerInject:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><h4 id="把-Aplayer-代码插入到主题配置文件">把 Aplayer 代码插入到主题配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;7714811335&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>重新运行Hexo就能看到网页左下角的Aplayer。</p><p>如果想切换页面是，音乐不会中断。就把主题配置文件中的<code>pjax</code>设为<code>true</code></p><h2 id="生成文章唯一链接">生成文章唯一链接</h2><h3 id="安装插件">安装插件</h3><p>在博客根目录（以下简称[Blogroot]）打开终端，运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="修改配置">修改配置</h3><p>插件安装成功后，在 [Blogroot] 的配置文件 _config.yml 找到 permalink：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">#修改为</span><br><span class="line">permalink: post/:abbrlink.html # post为自定义前缀</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><h2 id="修改横幅图片">修改横幅图片</h2><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td></tr><tr><td>archive_img</td><td>归档页面的 top_img</td></tr><tr><td>tag_img</td><td>tag 子页面 的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td></tr><tr><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每个 category 的 top_img</td></tr></tbody></table><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index_img: xxx.png</span><br></pre></td></tr></table></figure><p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p><h3 id="footer背景">footer背景</h3><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># footer是否显示图片背景(与 top_img一致)</span><br><span class="line">footer_bg: true</span><br></pre></td></tr></table></figure><h3 id="网站副标题">网站副标题</h3><p>可设置主页中展示的网站副标题或者自己喜欢的座右铭</p><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source 調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span><br><span class="line">  # source: 2  調用一句網（簡體） http://yijuzhan.com/</span><br><span class="line">  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  # source: 3</span><br><span class="line">  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 怕什么真理无穷，进一寸有一寸的欢喜。</span><br></pre></td></tr></table></figure><h2 id="修改页面样式-废案">修改页面样式(废案)</h2><p>在source\css中创建custom.css。</p><p>通过CSS调节页面透明度，模糊度，圆角，边框样式等</p><p>打开<code>custom.css</code>文件，复制下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --trans-light: rgba(255, 255, 255, 0.88);</span><br><span class="line">  --trans-dark: rgba(25, 25, 25, 0.88);</span><br><span class="line">  --border-style: 1px solid rgb(169, 169, 169);</span><br><span class="line">  --backdrop-filter: blur(5px) saturate(150%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 首页文章卡片 */</span><br><span class="line">#recent-posts &gt; .recent-post-item &#123;</span><br><span class="line">  background: var(--trans-light);</span><br><span class="line">  backdrop-filter: var(--backdrop-filter);</span><br><span class="line">  border-radius: 25px;</span><br><span class="line">  border: var(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 首页侧栏卡片 */</span><br><span class="line">#aside-content .card-widget &#123;</span><br><span class="line">  background: var(--trans-light);</span><br><span class="line">  backdrop-filter: var(--backdrop-filter);</span><br><span class="line">  border-radius: 18px;</span><br><span class="line">  border: var(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 文章页、归档页、普通页面 */</span><br><span class="line">div#post,</span><br><span class="line">div#page,</span><br><span class="line">div#archive &#123;</span><br><span class="line">  background: var(--trans-light);</span><br><span class="line">  backdrop-filter: var(--backdrop-filter);</span><br><span class="line">  border: var(--border-style);</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 导航栏 */</span><br><span class="line">#page-header.nav-fixed #nav &#123;</span><br><span class="line">  background: rgba(255, 255, 255, 0.75);</span><br><span class="line">  backdrop-filter: var(--backdrop-filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[data-theme=&quot;dark&quot;] #page-header.nav-fixed #nav &#123;</span><br><span class="line">  background: rgba(0, 0, 0, 0.7) !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 夜间模式遮罩 */</span><br><span class="line">[data-theme=&quot;dark&quot;] #recent-posts &gt; .recent-post-item,</span><br><span class="line">[data-theme=&quot;dark&quot;] #aside-content .card-widget,</span><br><span class="line">[data-theme=&quot;dark&quot;] div#post,</span><br><span class="line">[data-theme=&quot;dark&quot;] div#archive,</span><br><span class="line">[data-theme=&quot;dark&quot;] div#page &#123;</span><br><span class="line">  background: var(--trans-dark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 夜间模式页脚页头遮罩透明 */</span><br><span class="line">[data-theme=&quot;dark&quot;] #footer::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">[data-theme=&quot;dark&quot;] #page-header::before &#123;</span><br><span class="line">  background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 阅读模式 */</span><br><span class="line">.read-mode #aside-content .card-widget &#123;</span><br><span class="line">  background: rgba(158, 204, 171, 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">.read-mode div#post &#123;</span><br><span class="line">  background: rgba(158, 204, 171, 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 夜间模式下的阅读模式 */</span><br><span class="line">[data-theme=&quot;dark&quot;] .read-mode #aside-content .card-widget &#123;</span><br><span class="line">  background: rgba(25, 25, 25, 0.9) !important;</span><br><span class="line">  color: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line">[data-theme=&quot;dark&quot;] .read-mode div#post &#123;</span><br><span class="line">  background: rgba(25, 25, 25, 0.9) !important;</span><br><span class="line">  color: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="说明">说明</h3><ul><li>–trans-light：白天模式带透明度的背景色，如rgba(255, 255, 255, 0.88)底色是纯白色，其中0.88就透明度，在0-1之间调节，值越大越不透明；</li><li>–trans-dark: 夜间模式带透明度的背景色，如rgba(25, 25, 25, 0.88)底色是柔和黑色，其中0.88就透明度，在0-1之间调节，值越大越不透明;</li><li>–border-style: 边框样式，1px solid rgb(169, 169, 169)指宽度为1px的灰色实体边框;</li><li>–backdrop-filter: 背景过滤器，如blur(5px) saturate(150%)表示饱和度为150%的、高斯模糊半径为5px的过滤器，这是亚克力效果的一种实现方法;</li><li>大家可以根据自己喜好进行调节，不用拘泥于我的样式！</li></ul><h3 id="引入">引入</h3><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项中引入该CSS文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inject: </span><br><span class="line">  head: </span><br><span class="line">+    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>感谢shark-Gao，原文链接：<a href="https://blog.csdn.net/qq_58608526/article/details/129651733">https://blog.csdn.net/qq_58608526/article/details/129651733</a></p><h2 id="引入脚注功能">引入脚注功能</h2><p>今天MD文件写好后，发现脚注死活无法正常显示，查了一下原来是hexo不支持脚注功能。</p><h3 id="安装">安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-reference --save</span><br></pre></td></tr></table></figure><p>即可！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;魔改要加速了&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;给音乐界面添加Aplayer&quot;&gt;给音乐界面添加Aplayer&lt;/h2&gt;
&lt;p&gt;终于搞定了，我发现网上虽然教程不少，但是面向小白的真的聊胜于无了，捣鼓了半天终于自己摸索懂了。以下是我的一些操作流程。&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    <category term="Hexo的搭建之旅" scheme="http://example.com/categories/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>高性能膜电极的制备与研究——池滨</title>
    <link href="http://example.com/post/6a7616d7.html"/>
    <id>http://example.com/post/6a7616d7.html</id>
    <published>2023-03-13T14:56:32.000Z</published>
    <updated>2023-05-07T07:18:49.759Z</updated>
    
    <content type="html"><![CDATA[<h1>摘要</h1><p>膜电极（MEA）是PEMFC的核心部分，其直接决定了PEMFC性能的好坏。</p><p>MEA主要包括<code>质子交换膜（PEM）</code>、<code>阴极催化层（CaCL）</code>、<code>阳极催化层（AnCL）</code>、<code>阴极气体扩散层（CaGDL)</code>和<code>阳极气体扩散层（AnGDL）</code>。有时又将气体扩散层成为“碳纸”和”微孔层“。</p><p>阴极面临的困难和挑战：1、阴极水管理问题，阴极容易发生水淹现象，水淹会导致阴极催化剂活性降低、堵塞气体扩散孔道。2、氧气还原比较困难，催化剂的利用率比较低。</p><h1>第一章 绪论</h1><h2 id="燃料电池简介">燃料电池简介</h2><p>根据燃料电池的电解质进行分类，可将燃料电池分为：碱性燃料电池（AFC）。磷酸盐型燃料电池（PAFC），熔融碳酸盐型燃料电池（MCFC），固体氧化物型燃料电池。（SOFC）和质子交换膜燃料电池（PEMFC）。</p><h2 id="质子交换膜燃料电池概况">质子交换膜燃料电池概况</h2><h3 id="质子交换膜燃料电池的反应动力学">质子交换膜燃料电池的反应动力学</h3><p>PEMFC工作时，会出现电极电位偏离平衡电位的现象，称之为电极极化。这可以表示为PEMFC由静止尚未工作的状态进入到工作状态的过程中能量损失的多少。如下图</p><p><img src="https://s2.loli.net/2023/03/14/SZVUH48WYJDrawp.png" alt="质子交换膜燃料电池极化曲线示意图.png"></p><p>出现电压下降的主要原因：</p><p>（1）第一部分主要因为电化学极化引起的电压降低，因电极表面的反应动力学过程比较缓慢而导致了电压的降低，电化学极化主要发生在电池的高电压区域，这称之为为<code>活化过电位（ηact）</code>。</p><p>其可以通过：<code>提高电池的温度</code>、<code>电池反应气体的背压</code>、<code>提高反应气体的浓度</code>、<code>使用具有高催化活性的催化剂</code>等方法来促进电化学反应的动力学过程，从而可以减少在高电压区的电化学极化。</p><p>（2）第二部分是欧姆极化导致的电压降低，在PEMFC中，存在有各个组件之间的接触电阻。些原因引起的电压损失称之为<code>欧姆过电位</code>。</p><p>这可以通过：<code>优化 MEA的三项接触界面</code>、<code>采用更薄而又具有高质子传导率的质子交换膜</code>、<code>提高催化层和气体扩散层的导电率</code>以及通过<code>改进 MEA的制备工艺以增强催化层与质子交换膜之间的接触</code>等。</p><p>（3）第三部分是因为浓差极化导致的电压降低，朱啊哟是因为反应气体扩散慢，不能够及时扩散至催化层中参与反应引起的。这称之为<code>浓差过电位</code>。阳极基本上不存在浓差极化，这是因为阴极工作时会产生水，水要通过气体扩散的孔道排出去。特别是大电流密度区，会产生更多水。</p><p>主要可以通过：<code>增加阴极反应气体的流速和背压来减小</code>，另外也可以通过<code>改变阴极催化层</code>、<code>气体扩散层的亲疏水性</code>来实现及时有效地排出阴极产生的水，从而预防阴极气体扩散孔道被水堵塞。</p><h3 id="1-2-4质子交换膜燃料电池的反应热力学">1.2.4质子交换膜燃料电池的反应热力学</h3><p>对于整个电化学反应过程的吉布斯能和电势的关系可以用以下公式表示：</p><p>ΔG = -nFE</p><p>ΔG是反应的吉布斯自由能变化，E是 PEMFC的电压，n是电化学反应过程中转移的电子数，F为法拉第常数。</p><p>PEMFC不受卡诺循环的限制，所以效率高于普通的卡诺循环效率。理论的PEMFC能量转化效率为：</p><p>η=ΔG / ΔH= 83 %</p><h2 id="膜电极的研究">膜电极的研究</h2><p>MEA涉及<code>三相界面反应</code>、<code>复杂的传质传热过程</code>，对于促进 PEMFC的商业化，MEA的研究是一个严峻的挑战。</p><p>MEA的结构主要包括<code>阴极气体扩散层（Cathode Gas Diffusion Layer，CaGDL）</code>、<code>阴极催化层（Cathode Catalyst Layer，CaCL）</code>、<code>质子交换膜（Proton Exchange Membrane，PEM）</code>、<code>阳极气体扩散层（Anode Gas Diffusion Layer，AnGD）</code>、<code>阳极催化层（Anode Catalyst Layer，AnCL）</code>，而其中气体扩散层（Gas Diffusion Layer，GDL）又通常包括<code>碳纸（Carbon Paper，CP）</code>/<code>碳布（Carbon Cloth，CC）</code>和负载在其上的<code>微孔层（Microporous Layer，MPL）</code>组合而成。通常将不把 MPL纳入MEA组件的 MEA称之为“五合一”MEA，而将 MPL算入组件的称之为“七合一”MEA</p><p><img src="https://s2.loli.net/2023/03/14/9VWC1kRHIKmzyje.png" alt="膜电极结构示意图.png"></p><p>MEA的研究主要集中在：气体扩散层、催化层、质子交换膜、对MEA制备工艺的研究。</p><h3 id="气体扩散层研究状况">气体扩散层研究状况</h3><p>由碳纸或碳布和负载在其上的微孔层构成，主要作用是：<code>扩散气体</code>、<code>传导电子</code>和<code>排出阴极产生的水</code>。</p><p>当双层气体扩散层中的 PTFE（聚四氟乙烯）含量合适时，可以改善阴极的水管理。双层微孔层是：亲水层覆盖在疏水层上，而疏水层是与碳纸相接触的，亲水层能够保存一定的水。</p><h2 id="我国现状">我国现状</h2><p>主要趋势：</p><p>1、开发和制备高性能高功率密度的质子交换膜燃料电池，保持小体积的PEMFC具有更高的能量。</p><p>2、开发和制备长寿命的质子交换膜燃料电池 MEA。</p><p>3、找新的具有跟 Pt催化活性相媲美的其他非贵金属催化剂或非金属催化剂</p><h1>第二章 实验设计和表征</h1><h2 id="膜电极的制备">膜电极的制备</h2><h3 id="质子交换膜预处理">质子交换膜预处理</h3><p><strong>质子膜的预处理</strong>：以Nafion211膜为例，厚度为25μm。</p><p>1，首先，将Nafion裁成4cm×4cm，将 30 wt.%的过氧化氢稀释成 5 wt.%，将膜浸入其中，水浴80°C下放置1小时。</p><p>2，然后，倒掉溶液，在将膜浸泡在0.5 mol L-1的硫酸溶液里面，水浴80°C下放置1小时。</p><p>3，最后，用去离子水多次洗涤，取出表面残渣后，泡在去离子水中备用。</p><h3 id="气体扩散层的制备">气体扩散层的制备</h3><p><strong>先对碳纸进行预处理</strong>：</p><p>1、将碳纸裁成2.5cm×2.5cm，然后将碳纸浸泡在去离子水中，超声30min。</p><p>2、然后，将碳纸浸泡在丙酮中，放置12h。（取出碳纸里含有的杂质）</p><p>3、最后，将碳纸用去离子水和无水乙醇洗涤，后放在50°C的烘箱中烘干备用。</p><p><strong>碳纸的疏水化处理</strong>：</p><p>1、将60wt.%的 Teflon<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>乳液稀释成 5wt.%，然后将烘干的碳纸浸泡在5wt.%的Tefion乳液中，浸泡5min。</p><p>2、将碳纸在<strong>红外灯</strong>下烘干，重复浸泡、烘干，使得Teflon的质量占疏水化处理后碳纸质量的15%。</p><p>3、最后，将疏水化的碳纸在马弗炉<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>里一定温度下煅烧1h。</p><p><strong>微孔层的制备</strong>：</p><p>1，称取一定量的Vulacn XC-72R的碳粉、5wt.%的Teflon乳液和异丙醇混合在一起，混合后经超声波振荡分散成墨水状溶液。</p><p>2，用空气喷涂法，在红外灯下将混合液均匀喷涂在已经经过疏水化处理的碳纸表面，在碳纸表面形成微孔层,将其放置在 50℃的烘箱中烘 30 min。</p><p>3，后将烘干好的气体扩散层放置于一定温度下的马弗炉中煅烧 1 h。</p><p>其中微孔层中碳粉的载量为 3 mg cm-2，Teflon的质量占微孔层质量的 15wt.%。</p><h3 id="催化层的制备">催化层的制备</h3><p>1、称取一定 Johnson Matthey 60wt.% Pt/C催化剂，先用几滴去离子水润湿催化剂。</p><p>2、再往催化剂中加入一定量5wt.%的Nafion溶液和异丙醇，混合后经超声波振荡，分散均匀成催化剂浆料。</p><p>3、然后在红外灯下用空气喷涂法将催化剂浆料喷涂在烘干的质子交换膜两侧。</p><p>4、最后将喷好的催化层和质子交换膜放在50°C的烘箱中，烘1h。</p><h2 id="膜电极的电化学性能测试">膜电极的电化学性能测试</h2><h3 id="单电池的性能测试">单电池的性能测试</h3><p>过程如下：将组装好的单电池温度升高到 70℃，氢气和空气两边的背压<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>为 2atm，均为 100%加湿，空气流速为 600sccm，氢气流速为 150sccm。需要先对电池进行3个小时的放电，此过程为单电池的活化过程。</p><p><img src="https://s2.loli.net/2023/03/17/2I9SZxGC4H8OcdP.png" alt="单电池测试系统原理图.png"></p><h3 id="2-4-2-电化学交流阻抗谱（EIS）测试">2.4.2 电化学交流阻抗谱（EIS）测试</h3><p>EIS普遍用来研究电极界面反应和分析阻抗的谱图。</p><p>EIS可以在原位条件下，通过在测试过程中增加扰动信号，扰动信号为小振幅的正弦波电位，从而可以测出电极等在工作条件下的阻抗变化。</p><p>EIS具有扫描速度低、频率范围广和干扰小等的优点，因为这些优点和特性，EIS也广泛运用与燃料电池膜电极的阻抗测试中。</p><h2 id="膜电极催化剂的表征">膜电极催化剂的表征</h2><h3 id="扫描电子显微镜（SEM）">扫描电子显微镜（SEM）</h3><p>膜电极催化层的表面结构和横截面构均是通过扫描电子显微镜（SEM）测试仪测得。</p><p>SEM测试前需制备样品：先在样品台上粘上一层导电胶，然后将样品直接粘在导电胶上即可。</p><p>对于膜电极催化层的表面测试，只需直接取一小块膜电极粘在导电胶上即可进行 SEM表征。而对于膜电极催化层的截面测试，为了能够获得平整的截面，需要将膜电极放置在液氮里冷冻，然后把膜电极撕开，然后将撕开的膜电极粘贴在 SEM样品台的侧面。</p><h3 id="表面接触角测试">表面接触角测试</h3><p>催化层的亲疏水性是通过测试水滴在催化层的表面接触角来判定。（德国 Dataphysics OCA40 Micro测试仪）</p><p>测试过程：先将喷好的膜电极平整的放在样品台上，固定好后往膜电极催化层的表面滴加一滴 5μL的水滴。然后用仪器自带的摄像仪拍摄水滴在催化层表面的状况，对水滴在表面的状态进行拟合就可以得到膜电极催化层的接触角大小，根据接触角的大小判断膜电极催化层的亲疏水性。</p><h1>第三章 催化层中Nafion含量对膜电极性能的影响</h1><p>催化层主要是由催化剂和离子聚合物组合合成，通常催化剂是Pt/C催化剂，离子聚合物用的较多的是Nafion溶液。</p><p>离子聚合物起的作用是粘结剂和传导质子。</p><p>实验结果证明，在电池温度120°C，低湿度的条件下，当阴极水淹现象发生之前，MEA性能随着催化剂离子聚合物含量的增加而提高。离子聚合物添加为40wt.%的时候能够获得最好的电池性能。当在高湿度条件下（95%)，阴极催化层Nafion含量为20wt.%和30wt.%能获得最好电池性能。随着湿度的降低，Nafion的添加量会随着增加。</p><p>Xie等人通过研究发现，当Nafion的含量在 27±6wt.%的时候能获得最好的电池性能。Kim等人发现阴极催化层中 Nafion的含量为 30wt.%，阳极催化层中 Nafion的含量为 25wt.%的时候电池性能最好。Suzuki等人研究发现当离子聚合物的最佳添加量含量为 33wt.%。</p><h2 id="实验">实验</h2><h3 id="膜电极的制备-2">膜电极的制备</h3><p>质子交换膜的预处理：（Nafion211膜，杜邦公司）</p><ul><li>将质子交换膜置于 5%的过氧化氢溶液里在水浴锅里 80℃条件下煮 1小时，然后置于 0.5 mol L-1的硫酸溶液中同样在水浴锅里 80℃条件下煮 1小时，煮完之后用去离子水洗涤数遍，除去质子交换膜表面的硫酸根离子。</li></ul><p>直接喷涂法</p><ul><li>称取一定量的催化剂（60 wt.% Pt/C）于小瓶子内，往催化剂中添加几滴去离子水以润湿催化剂，再往小瓶子中加入不同量的 5% Nafion溶液（杜邦公司），最后加入一定量的异丙醇，放置在超声中进行超声 30分钟，使其在异丙醇中分散均匀，制备得 MEA阴极和阳极催化层浆。</li><li>用空气喷枪将阴极催化层浆料均匀地喷涂在质子交换膜的两侧，然后将制备好 MEA放置在 50℃的烘箱中烘 1小时。</li></ul><h2 id="结果">结果</h2><h3 id="不同Nafion含量对膜电极性能的影响">不同Nafion含量对膜电极性能的影响</h3><p><img src="https://s2.loli.net/2023/03/26/Ec2tFigvK1UInBh.png" alt="实验结果.png"></p><p>Nafion的含量高于 35wt.%之后，随着Nafion含量的增加，MEA的性能开始出现衰减的趋势。</p><p>当Nafion的含量高达 50wt.%之后，MEA在 0.7 V、0.6 V时的电流密度和最大功率密度都出现了大幅度的衰减。当催化层中Nafion含量为 35wt.%的时候，MEA可以获得最好的电当催化层中Nafion含量为35wt.%的时候，MEA可以获得最好的电池性能。</p><p>适量的Nafion含量有利于催化剂的粘结，也更有利于催化剂层中质子的传导，但同时过高的Nafion会导致增加催化层中电子传导的阻力。其原因：是Nafion是电子绝缘体。本次实验中35wt.%Nafion含量不仅能获得一个最佳的质子传导能力，还能最大地减少催化层的电子传导能力受到的影响，保证MEA的最好电池性能。</p><h1>第四章 阴极催化层添加疏水性氟碳化合物对膜电极性能的研究</h1><h2 id="引言">引言</h2><h3 id="背景">背景</h3><p>膜电极作为PEMFC的关键部件之一，直接决定了PEMFC的性能。</p><p>​     PEMFC实际工作过程中，氧气分子在阴催化层催化剂作用下被还原成阳离子，然后与阳极传递过来的质子和电子反应生成大量的水。<strong>PEMFC运行中需要一定量的水保证质子交换膜传导质子的能力</strong>，如果阴极因反应产生的水没有及时排出，没有得到妥善的管理，那么<strong>过量的水就会导致阴极催化层的水淹现象</strong>。</p><p>​     原因：1、阴极的水不能及时排出，从而会引起催化层孔隙、微孔道的堵塞，从而影响了反应气体的传输路径，使得反应气体扩散至催化剂活性点的速度变慢。2、水淹没了催化层，导致可参与气体催化反应的催化剂活性位点大大减少，降低了催化剂的利用率和活性。</p><p>​     如果能够探索出有效而又不复杂的改善MEA水管理的办法，那么对于提升MEA的性能和促进PEMFC商业化有重大意义。</p><p>​     本实验制备了一系列含有不同量的氟碳化合物(FC，Teflon乳液)的阴极催化层，深入而又系统地探讨了不同氟碳化合物添加量对MEA性能的影响。</p><p><strong>水淹现象的影响</strong>：水会引起催化层孔隙、微通道的堵塞，影响了反应气体的传输路径，使得反应气体扩散至催化剂活性点的速度变慢。另外，水淹没了催化层，会导致可参与气体催化反应的催化剂活性位点大大减少，降低了催化剂的利用率和活性。</p><p>Avcioglu等人将聚全氟乙丙烯（FEP）纳米粒子到阴极催化层。添加FEP后，阴极催化层的疏水性得到了提高。FEP使得催化层中形成了疏水性的孔道，促进了阴极反应水的排出，减缓了MEA的水淹。</p><p>Xiong等人设计了一种双层阴极催化层用以平衡阴极催化层的亲疏水性。他们将Nafion作为催化剂的粘结剂，形成一层薄的亲水层，亲水层与质子交换膜相粘结，然后在亲水层上在使用Nafion和PTFE最为在粘结剂形成薄的水水层。这种双层阴极催化层用于空气自呼吸 PEMFC的膜电极时，有很高的电池性能，并且改善了阴极水管理。</p><p>Li等人在阴极催化层中加入二甲基硅油（DSO）以增强阴极催化层的疏水能力。添加后够有效地预防 MEA在大电流密度下阴极的水淹现象。</p><p>Choun等人通过添加聚二甲硅氧烷（PDMS）到阴极催化层中，制备了疏水性的阴极催化层，减少了电池性能的衰减和提高了电池的稳定性。</p><p>Kitahara等人制备了含有亲水微孔层和疏水微孔层双微孔层的气体扩散层。目的是通过调节 MEA阴极气体散层的亲水性和疏水性也是一种改善阴极水管理和提升 MEA性能的方法。</p><p>Öztürk等人用不同的疏水性物质添加到微孔层中，疏水性聚合物主要有聚四氟乙烯（PTFE）、氟化乙丙烯（FEP）以及两种不同的比例的聚二甲硅氧烷（PDMS）。</p><p>Wang等人[47]也是通过设计了双层的气体扩散层来提升阴极的水管理能力。这种方式能够获得更高的极限电流密度和更加稳定的电池性能。</p><h2 id="实验-2">实验</h2><h3 id="膜电极的制备-3">膜电极的制备</h3><p>​     先对质子交换膜（Nafion 211）进行预处理：</p><p>​     将质子交换膜置于 5%的过氧化氢溶液里在水浴锅里 80℃条件下煮 1 小时去除有机物杂质，然后置于 0.5 mol L -1 的硫酸溶液中同样在水浴锅里 80℃条件下煮 1 小时，煮完之后用去离子水洗涤数遍，除去质子交换膜表面的无机杂质。</p><p>​     直接喷涂法：先称取一定量的催化剂 （60 wt.% Pt/C）于小瓶子内，往催化剂中添加几滴去离子水以润湿催化剂，再往小瓶子中加入一定量的 FC 和 5%的 Nafion 溶液，最后加入一定量的异丙醇，放置在超声中进行超声 30 分钟，使其在异丙醇中分散均匀，制备得 MEA 阴极催化层浆料。然后用空气喷枪将阴极催化层浆料均匀地喷涂在质子交换膜的阴极侧，然后将制备好的 MEA 放置在 50℃的烘箱中烘 1 小时。</p><p>​     阳极催化层不需要加入 FC。</p><p>​     其中阴极催化层中 Pt 载量为 0.2 mg cm-2，阳极催化层中 Pt 载量为 0.1 mg cm-2，阴阳极催化层中干 Nafion 粘结剂占催化剂质量的百分比为 35%。膜电极的活性面积为 5 cm2。</p><p>​      将氟碳化合物不同添加量的 MEA 分别命名为 MEA-30FC（30 wt.%）、 MEA-40FC、MEA-50FC、MEA-60FC 和 MEA-70FC。</p><h3 id="形貌特征">形貌特征</h3><p><img src="https://s2.loli.net/2023/05/07/2Phvzl39uU67XJT.png" alt="1683443557358.jpg"></p><p>​    a，c，e没有加FC的对照实验。b，d，f是固含量为50的SEM图。</p><p>​    a，b是催化层表面结构，图中能看到FC均匀地分散在阴极催化层结构中。</p><p>​    c，e，d，f是横截面SEM图，e和f分别是c和d的局部放大图。对比发现，添加FC没有明显改变催化层结构。</p><p>​    虽然会导致少量Pt/C粒子会站在一起，但是不会使MEA性能衰减。催化剂颗粒改变了催化剂层的几何结构和孔结构，使得MEA性能得到提升。</p><h3 id="表面接触角">表面接触角</h3><p>​    分别测试了不同含量FC对疏水性的影响。</p><p>​    当FC含量为30 wt.%时，接触角从135.6°增加到139.7°。增加到 70 wt.%时，阴极催化层的接触角从 139.7°增加到 146.5。</p><p>​    测试结果表明了通过在阴极催化层添加 FC 能够有效地增强其疏水性。</p><p><img src="https://s2.loli.net/2023/05/07/b6xjlDsCk1GpiUH.png" alt="1683443612264.jpg"></p><h3 id="FC添加量对膜电极性能的影响">FC添加量对膜电极性能的影响</h3><p><img src="C:/Users/%E5%B0%8F%E6%9E%97/AppData/Roaming/Typora/typora-user-images/image-20230507151523604.png" alt="image-20230507151523604"></p><p>​    测试条件：在电池温度 70℃，相对湿度为 100%和背压 30 psi 的条件下。分别测试0、30、40、50、60、70wt.% FC的阴极催化层。</p><p>​    可以看出：分别添加 30 wt.%、40 wt.%、50 wt.% FC 时比起不添加 FC 的 MEA 展现出了更好的电池性能。50 wt.% FC 的 MEA 有最 好的电池性能，0.7 V 的电流密度能够达到 990 mA cm-2，0.6 V 的电流密度为 1400 mA cm-2，最大功率密度为 865 mW cm-2。不添加 FC 的 MEA 在 0.7 V 和 0.6 V 的电流密度分别为 700 mA cm-2和 1100 mA cm-2，最大功率密度为 711 mW cm-2。</p><p>​    添加适量的FC可以有效地排出反应的水，尤其是大电流密度的时候。FC 超过 50 wt.%的时候，MEA的性能会下降。原因是 FC 过于多导致覆盖住催化剂的活性位点，降低了 Pt 的利用率。</p><h3 id="膜电极电化学交流阻抗谱分析">膜电极电化学交流阻抗谱分析</h3><p><img src="https://s2.loli.net/2023/05/07/mWV9R716AiQj8eu.png" alt="1683443751166.jpg"></p><p>​    作者测试了MEA 在 0.8 V 时的电化学交流阻抗（EIS）。</p><p>​    可以看出出 MEA-50FC 和 MEA-0FC 有基本上相同的欧姆阻抗（RΩ），表明了在阴极催化层添加 FC 之后不会增加 MEA 的欧姆阻抗。</p><p>​    欧姆阻抗主要包括质子交换膜的质子转移阻抗、电极和界面接触阻抗，其中质子交换膜的质子转移阻抗是欧姆阻抗中的最主要部分。</p><p>​    图中可以看出，FC的添加基本上不会影响物质传导和电荷传导能力，相反添加了FC后会使得电荷传导阻抗降低。作者推测是适量FC会使氧气分子更好的接触到催化剂的活性位点。</p><h3 id="空气流速对膜电极性能的影响">空气流速对膜电极性能的影响</h3><p><img src="https://s2.loli.net/2023/05/07/NlanWqsXC4iwy2u.png" alt="image.png"></p><p>​    MEA-0FC（a）和 MEA-50FC（b）</p><p>​    单电池测试条件：70℃，100% RH，30 psi</p><p>​    空气流速从 600 sccm 减少到 300 sccm 时，阴极催化层没有添加 FC 的MEA 在 0.6 V 和 0.7 V 时的电流密度都降低了，而最大功率密度也从 771 mW cm-2 减少到了611 mW cm-2。</p><p>​    空气流速从 600 sccm 减少到 300 sccm 时，阴极催化层添加了 50 wt.% FC 的 MEA 在 0.6 V 和 0.7 V 时的电流密度几乎没有衰减，而最大功率密度还可以 保持有 788 mW cm-2，依然高于在高空气流速条件下阴极催化层没有添加 FC 的 MEA。</p><p>​    降低空气流速之后，阴极催化层添加了 FC 的MEA还是可以保持住高性能的原因是因为阴极催化层层具有疏水能力可以将反应产生的水及时排除，提高了阴极的水管理能力。</p><h3 id="膜电极的稳定性测试">膜电极的稳定性测试</h3><p><img src="https://s2.loli.net/2023/05/07/i2sVCcFP8v1m9xw.png" alt="image.png"></p><p>​    可以看到经过了 60 h 的长时间放电之后，阴极催化层添加了 FC 的 MEA 电流密度仍然能够保持在 900 mA cm-2，而阴极催化层没有添加 FC 的 MEA 电流密度衰减到 770 mA cm-2。</p><p>​     从这个结果很明显可以看出阴极催化层添加了50 wt.% FC 的 MEA 具有更好的稳定性，经过 60 h 的放电之后，电流密度衰减了 10%，而阴极催化层没有添加 FC 的 MEA 经过 60 h 的放电之后电流密度衰减了 23%。</p><p>​    原因是阴极催化层添加了 50 wt.% FC之后能够提升水管理能力，将阴极多余的水及时排出，所以阴极催化层的催化剂不会被水淹没；随着 MEA 的长时间工作，催化层的质子传导粘结剂（Nafion）及电解质会发生部分的损失，这部分电解质和粘结剂的损失主要是发生在阴极催化层。水没有及时排出在阴极催化层停留，而电解质和粘结剂会溶解在水中。</p><h2 id="小结">小结</h2><p>​     本研究中优化后的 MEA 中，阴极催化层添加了 50 wt.% FC 的 MEA-50FC 表现出了最好的 MEA 性能，其在电压 0.6 V 和 0.7 V 时的电流密度分别可以达到 990 mA cm-2 和 1400 mA cm-2，比起没有添加 FC 的 MEA 性能高出了很多。当然，MEA-50FC 也具有更好的稳定性，对于 MEA 性能和稳定性得以提升的原因总结为以下几个方面：</p><p>​    （1） 适量的 FC 能够提升催化层的疏水性，改善了阴极的水管理能力，可以有效地排出阴极产生的水，预防了阴极水淹现象，保证了阴极反应气体顺畅扩散至阴极催化层的反应活性位点；</p><p>​    （2）阴极催化层添加了 FC 之后，减少了电荷转移阻抗可能是因为添加 FC 之后促进了氧气分子的吸附和活化作用。</p><p>3</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">特氟龙，氟聚合物涂料。适用于多钟应用：不粘性、低摩擦系数、耐热性（可在260°C下连续使用，316°C下间歇使用）、耐化学腐蚀、不浸润、耐磨性、独特的电气特性、符合食品接触标准。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">是一种常用的加热设备，又称高温箱炉。专用于熔化实验、热处理等。温度可升至1200度。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">背压，指的是后端的压力，通常用于描述系统排出的流体在出口处或二次侧受到的<strong>与流动方向相反的压力</strong>（大于当地大气压)。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;摘要&lt;/h1&gt;
&lt;p&gt;膜电极（MEA）是PEMFC的核心部分，其直接决定了PEMFC性能的好坏。&lt;/p&gt;
&lt;p&gt;MEA主要包括&lt;code&gt;质子交换膜（PEM）&lt;/code&gt;、&lt;code&gt;阴极催化层（CaCL）&lt;/code&gt;、&lt;code&gt;阳极催化层（AnCL）&lt;/code&gt;</summary>
      
    
    
    
    <category term="大学大不了自学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E5%A4%A7%E4%B8%8D%E4%BA%86%E8%87%AA%E5%AD%A6/PEMFC/"/>
    
    
    <category term="大学" scheme="http://example.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="PEMFC" scheme="http://example.com/tags/PEMFC/"/>
    
  </entry>
  
  <entry>
    <title>Flask的使用</title>
    <link href="http://example.com/post/dce9aed1.html"/>
    <id>http://example.com/post/dce9aed1.html</id>
    <published>2023-03-13T07:09:50.000Z</published>
    <updated>2023-03-19T14:53:32.712Z</updated>
    
    <content type="html"><![CDATA[<h1>1.1.1 Flask是什么</h1><p>flask是种非常容易上手的Python web开发框架，只需具有基本的python开发技能，即可开发出一个web应用来。</p><p>flask的官方文档：<a href="http://flask.pocoo.org/">http://flask.pocoo.org/</a></p><p>flask的中文文档：<a href="http://dormousehole.readthedocs.org/en/latest/">http://dormousehole.readthedocs.org/en/latest/</a></p><p>我们可以先读文档中的《安装》，然后读《快速上手》。Flask有着强大的拓展功能。</p><h2 id="1-1-2-Flask的安装">1.1.2  Flask的安装</h2><p>在win中，安装非常简单。在文件夹中的命令窗口中直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>如果最后显示:</p><p><code>Successfully installed flask Werkzeug Jinja2 itsdangerous markupsafe </code></p><p><code>Cleaning up...</code></p><p>表示安装成功。</p><h2 id="1-1-3-Flask实例">1.1.3 Flask实例</h2><p>编写以下程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import flask      # 引入一个 flask 程序包，在正确安装flask后都能正常引入。</span><br><span class="line">app=flask.Flask(__name__)      # 初始化一个flask对象，参数__name__是程序的名称</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)       # 这是一段路由控制语句，每个路由用“@app.route(...) ”来指明，</span><br><span class="line">def hello():      # 在访问相对地址是“/”时就执行hello（），因此访问http://127.0.0.1:5000/时看到“你好”</span><br><span class="line">return &quot;你好&quot;            </span><br><span class="line"></span><br><span class="line">@app.route(&quot;/hi&quot;)      #在访问地址相对地址是&quot;/hi&quot;时，执行hi()，因此访问http://127.0.0.1:5000/hi 时看到“Hi,你好”。</span><br><span class="line">def hi():</span><br><span class="line">return &quot;Hi,你好&quot;</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行程序，可以显示<code>http://127.0.0.1:5000/</code>的web地址，打开则在浏览器中打开显示<code>你好</code></p><p>如果输入<code>http://127.0.0.1:5000/hi</code>，则显示<code>hi，你好</code></p><h2 id="1-1-4显示静态网页">1.1.4显示静态网页</h2><p>如果在程序同一文件夹中有一个静态网页，例如 ”index.htm“，那么很容易用flask做一个web网站程序 <a href="http://server.py">server.py</a>，它的主页就是index.htm。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"></span><br><span class="line">app=flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">fobj=<span class="built_in">open</span>(<span class="string">&quot;index.htm&quot;</span>,<span class="string">&quot;rb&quot;</span>)    读取文件index.htm</span><br><span class="line">data=fobj.read()</span><br><span class="line">fobj.close()</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(err)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只支持html语言，不支持md语言。</p><h1>1.2.2 用urllib程序包访问</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request        <span class="comment"># 引入程序包</span></span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:5000&quot;</span>        <span class="comment"># 定义变量url为你的网址</span></span><br><span class="line">html = urllib.request.urlopen(url)        <span class="comment"># 打开url网站</span></span><br><span class="line">html = html.read()        <span class="comment"># 使用read函数读取html文本，默认为二进制数据</span></span><br><span class="line">html = html.decode()        <span class="comment"># 将读取的二进制数据转换为utf-8编码</span></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1.1.1 Flask是什么&lt;/h1&gt;
&lt;p&gt;flask是种非常容易上手的Python web开发框架，只需具有基本的python开发技能，即可开发出一个web应用来。&lt;/p&gt;
&lt;p&gt;flask的官方文档：&lt;a href=&quot;http://flask.pocoo.org/&quot;</summary>
      
    
    
    
    <category term="Python_Study" scheme="http://example.com/categories/Python-Study/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>虚幻4：从入门到入坟</title>
    <link href="http://example.com/post/19686.html"/>
    <id>http://example.com/post/19686.html</id>
    <published>2022-11-06T06:30:21.000Z</published>
    <updated>2023-03-13T14:58:14.662Z</updated>
    
    
    
    
    <category term="虚幻4：从入门到入坟" scheme="http://example.com/categories/%E8%99%9A%E5%B9%BB4%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
    
    <category term="虚幻4" scheme="http://example.com/tags/%E8%99%9A%E5%B9%BB4/"/>
    
  </entry>
  
  <entry>
    <title>二、Hexo搭建 从入门到入土</title>
    <link href="http://example.com/post/57ee7c1d.html"/>
    <id>http://example.com/post/57ee7c1d.html</id>
    <published>2022-11-01T08:24:59.000Z</published>
    <updated>2023-05-07T06:57:35.434Z</updated>
    
    <content type="html"><![CDATA[<h1>HEXO教程</h1><ul><li>之前一直用博客来记录自己的学习收获，舍友突然觉得我这样学习还挺方便的，让我帮忙搭建个博客。但是竟然怎么都想不起来怎么上传Github了。</li><li>今天就顺便记下我是怎么折腾我的Blog的吧。</li></ul><h2 id="怎么搭建网站呢？">怎么搭建网站呢？</h2><h3 id="1、安装Git">1、安装Git</h3><p>Git非常强大，大家有兴趣可以都了解了解，在此推荐廖雪峰老师的Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 </a></p><p>Windows可以到git的官网上下载<a href="https://gitforwindows.org/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E5%8F%88%E4%B8%80%E4%B8%AAGit">https://gitforwindows.org/，下载后又一个Git</a> Bash命令行工具，以后可以用它来运行。</p><h3 id="2、安装nodejs">2、安装nodejs</h3><p>Windows可以通过<a href="https://nodejs.org/en/download/%EF%BC%8C%E4%B8%8B%E8%BD%BDLTS%E7%89%88%E6%9C%AC">https://nodejs.org/en/download/，下载LTS版本</a></p><p>下载完后可以通过执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看是否安装成功。</p><h3 id="3、开始安装HEXO了">3、开始安装HEXO了</h3><p>首先你要创建一个文件夹，作为以后你网页的根目录，然后在新建好的文件夹内右键打开git bash，或者shift+右键打开powershell作为控制台。（本人更喜欢用Pycharm作为控制台）</p><p>输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后用下面代码检查下版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>假如你的文件叫做“myblog”（以下均用此替代）。输入下面代码，建立hexo文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog   //定位在myblog这个文件夹内，以执行后续操作</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>接着会有以下几个文件</p><p><strong>_config.yml</strong>：用于配置网站的参数信息。需要注意的是，在根目录内，如果你创建了<code>_configxxxx.yml</code>（是你主题的配置文件），hexo会先读取你的主题配置文件，再读取<code>_config.yml</code>文件。</p><p><strong>scaffolds</strong>：是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p><strong>source</strong>：就是你发布文章的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</p><p><strong>themes</strong>：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h3 id="4、hexo的基础配置（也就是-config中的一些设置）">4、hexo的基础配置（也就是<code>_config</code>中的一些设置）</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述<strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center"><code>title</code>title</td><td style="text-align:center">网站标题</td></tr><tr><td style="text-align:center"><code>subtitle</code></td><td style="text-align:center">网站副标题</td></tr><tr><td style="text-align:center"><code>description</code></td><td style="text-align:center">网站描述</td></tr><tr><td style="text-align:center"><code>author</code></td><td style="text-align:center">您的名字</td></tr><tr><td style="text-align:center"><code>language</code></td><td style="text-align:center">网站使用的语言</td></tr><tr><td style="text-align:center"><code>timezone</code></td><td style="text-align:center">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p><code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="5、生成你的网页">5、生成你的网页</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>用它生成网页，然后在浏览器中输入localhost:4000即可看到你的博客。</p><h2 id="hexo上传至Github">hexo上传至Github</h2><h3 id="安装包">安装包</h3><p>安装node.js</p><p>安装git环境</p><p>安装hexo</p><ul><li>不再过多赘述，更多可以查看hexo的文档：<a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></li></ul><h3 id="新建Github仓库">新建Github仓库</h3><p>创建并登录自己的Github，新建个仓库，命名为<code>username.github.io</code>，username为你自己的用户名（一定要相同），勾选<strong>Initialiaze this repository with a README</strong>和<strong>Public</strong></p><p><img src="https://s2.loli.net/2023/03/15/gzhub73CI8ZHRdF.png" alt="新建仓库.png"></p><p><img src="https://s2.loli.net/2023/03/15/frFdeT8PcBJ9pyC.png" alt="创建设置.png"></p><h3 id="修改配置">修改配置</h3><p>1，在你的电脑中的BLOG根文件夹中找到：<strong>_config.yml</strong></p><p>2，将最后的deploy改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>运行下面代码，安装deploy插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="配置公钥">配置公钥</h3><p>在控制台运行：yourname就是你GitHub的用户名，yourmail并不一定要和你 Git 账户的邮箱或者 Git 账户名保持一致，只是常常是和你账户邮箱保持一致，这样设置，就能知道这个公钥被绑定在哪个 Git 账户上了。邮箱地址可以在你GitHub-setting-Emails中找到。</p><p>例如：我是用QQ注册的，那么“yourmail”就是我的QQ邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;yourmail&quot;</span><br></pre></td></tr></table></figure><p>可以输入下面的代码，检查有没有错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后，生成SSH公钥，其中的id_rsa.pub就是公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourmail&quot;</span><br></pre></td></tr></table></figure><p>根据提示，进入ssh的文件夹内，其中的id_rsa.pub就是公钥</p><p>将公钥复制粘贴至你的仓库-Settings-Deploy keys-Add deploy keys</p><p>名字随便起，key复制文件内容，allow write access  打开</p><p>可以在控制台中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>然后就运行<code>hexo d</code>代码就行了，注意deploy时可能要你输入username和password。</p><h3 id="部署运行">部署运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><code>hexo c</code>清除了你之前生成的东西，也可以不加。</p><p><code>hexo g </code>生成静态文章</p><p><code>hexo d</code> 部署文章至GitHub中</p><p>当你最后得到一串这样的代码<strong>INFO    Deploy done：git</strong>，恭喜大功告成。</p><p>现在你的网址就是<code>https://yourname.github.io</code>。</p><h3 id="后记">后记</h3><p>后来发现部署后输入网页结果404的情况，查明后发现原来是GitHub默认分支是main，但是我们用的是master，我们可以通过重新设置branches来指定分支。方法如下，</p><p>首先，打开你的代码仓库——setting——Branchers</p><p>点击切换</p><p><img src="https://s2.loli.net/2023/03/15/peojNJkWEdcIv48.png" alt="分支.png"></p><p>然后改为master，点击Updata</p><p><img src="https://s2.loli.net/2023/03/15/9XB1nNGMu8cbOEK.png" alt="默认分支.png"></p><p>然后找到右边的Pages，在Branch中改为master，在点击Save，大功告成。</p><p><img src="https://s2.loli.net/2023/03/15/BaDGheKI8FmZSwl.png" alt="修改网页.png"></p><h2 id="开始写文章啦">开始写文章啦</h2><h3 id="创建文章">创建文章</h3><p>根据hexo的文档：<a href="https://hexo.io/zh-cn/docs/writing">写作 | Hexo</a>，可以有很多讲究。但是实际上用的没几个。</p><p>打开控制台，输入以下，其中“~”是你的文件名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new ~</span><br></pre></td></tr></table></figure><p>其实完整的是这样的，只不过它默认创建了post罢了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title</span><br></pre></td></tr></table></figure><p>然后在<code>source</code>的<code>_post</code>中就可以看到你刚创建的文件了</p><h4 id="关于layout">关于layout</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th style="text-align:center">布局</th><th style="text-align:center">路径</th></tr></thead><tbody><tr><td style="text-align:center"><code>post</code></td><td style="text-align:center"><code>source/_posts</code></td></tr><tr><td style="text-align:center"><code>page</code></td><td style="text-align:center"><code>source</code></td></tr><tr><td style="text-align:center"><code>draft</code></td><td style="text-align:center"><code>source/_drafts</code></td></tr></tbody></table><h4 id="关于draft">关于draft</h4><p>也就是草稿的意思，你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。<br>不怎么常用罢了</p><h3 id="开始写作">开始写作</h3><p>推荐使用Typora，写作很便捷。本文以此为例。</p><p>Hexo默认以文件名字作为文章标题，不过可以换。打开文件，看到背景是灰色的那个栏目没？在那个里面改参数。</p><p>例如<img src="https://s2.loli.net/2023/03/15/ZHbzLOl5scAjCUu.png" alt="typore示例.png"></p><ul><li><p><strong>title</strong>：为文章标题，空格将会被替换为短杠。</p></li><li><p><strong>date</strong>：就是日期罢了，默认是你创建时间。</p></li><li><p><strong>cover</strong>：是你文章的封面，可以上传到SM.MS然后使用。</p><p>其他几个后面单独说明。至此，你就可以开始愉快地写文章了。</p></li></ul><h2 id="感觉原生主题太难看？换！">感觉原生主题太难看？换！</h2><p>我用的是butterfly主题，官方文档：<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p><h3 id="下载主题">下载主题</h3><p>在Hexo的根目录中（也就是My blog文件夹内）运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>升级方法：在主题目录下，运行 <code>git pull</code>  (别用)</p><h3 id="更改配置">更改配置</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code>，把主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>安装必要插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>建议：（可以不采用）</p><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的<code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code> 去。( 注意: 复制的是主題的 _config.yml ,而不是 hexo 的 <code>_config.yml</code>)，一般直接改根目录中的<code>_config.butterfly.yml</code></p><hr><p>以后再更新，歇会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;HEXO教程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;之前一直用博客来记录自己的学习收获，舍友突然觉得我这样学习还挺方便的，让我帮忙搭建个博客。但是竟然怎么都想不起来怎么上传Github了。&lt;/li&gt;
&lt;li&gt;今天就顺便记下我是怎么折腾我的Blog的吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2</summary>
      
    
    
    
    <category term="Hexo的搭建之旅" scheme="http://example.com/categories/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>一、Hexo搭建</title>
    <link href="http://example.com/post/19686.html"/>
    <id>http://example.com/post/19686.html</id>
    <published>2022-10-31T14:56:18.000Z</published>
    <updated>2023-05-07T06:57:26.525Z</updated>
    
    <content type="html"><![CDATA[<h1><span style='font-size:30px'> <strong>前言</strong></span></h1><p>这是个极其曲折的过程，采用Hexo和Github 搭建网页确实很容易，butterfly主题的应用网上也能查到很多相关资料。</p><p>但是作为一个零基础的小白，后续的维护与插件的更新属实是让我头皮发麻。我写这个小站的初衷也是为了当个个人日记，记录下自己的学习过程，成长经历。同时也是记录下自己的操作，防止日后脑溢血…</p><p>路漫漫其修远兮，，，<img src="https://s2.loli.net/2022/10/31/qh7yOMKrjHlSkZC.jpg" alt="3ceaca8f86157859.jpg" style="zoom:25%;" /></p><hr><h1><span style='font-size:30px'> <strong>Hexo+GitHub的优缺点</strong></span></h1><p>用GitHub Pages来搭建有很多优点</p><ul><li><p>首先就是我最吸引我的，零成本，不用购买服务器和域名（域名的事以后再说），一切工作都能在Git Hub上完成。</p></li><li><p>不用维护，而且很稳定，搭建几年后再看，文章可能还在。</p></li><li><p>官方有很多现成框架可以直接使用。</p></li><li><p>Git Hub上大佬真的多，各种资源直接调用。</p></li></ul><p>但是也有很多缺点（很头疼）</p><ul><li><p>搭建过程复杂，需要搭建环境，容易出错。</p></li><li><p>国内访问会稍慢，不过可以设置通过国内服务器访问（暂时不会）。</p></li><li><p>静态网页，需要每次手动上传。</p></li></ul><p>主题采用的是Butterfly。<a href= "https://butterfly.js.org/posts/21cfbf15/" >详见butterfly的搭建与美化教程</a></p><hr><h1><span style='font-size:30px'> <strong>后记</strong></span></h1><p>这是我第三遍尝试搭建自己的页面。第一个当实验，什么都不懂。第二个没有正确配置，并且没有备份，导致BUG成堆，直接崩溃。</p><p>第三个打算记录下自己的操作，方便日后找BUG。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span style=&#39;font-size:30px&#39;&gt; &lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;这是个极其曲折的过程，采用Hexo和Github 搭建网页确实很容易，butterfly主题的应用网上也能查到很多相关资料。&lt;/p&gt;
&lt;p&gt;但</summary>
      
    
    
    
    <category term="Hexo的搭建之旅" scheme="http://example.com/categories/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
